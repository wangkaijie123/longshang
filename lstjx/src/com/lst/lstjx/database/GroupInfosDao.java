package com.lst.lstjx.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP_INFOS.
*/
public class GroupInfosDao extends AbstractDao<GroupInfos, Long> {

    public static final String TABLENAME = "GROUP_INFOS";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Groupid = new Property(1, String.class, "groupid", false, "GROUPID");
        public final static Property Groupname = new Property(2, String.class, "groupname", false, "GROUPNAME");
        public final static Property Portrait = new Property(3, String.class, "portrait", false, "PORTRAIT");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
    };
    public GroupInfosDao(DaoConfig config) {
        super(config);
    }
    
    public GroupInfosDao(DaoConfig config, GroupDaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_INFOS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'GROUPID' TEXT NOT NULL UNIQUE ," + // 1: groupid
                "'GROUPNAME' TEXT NOT NULL ," + // 2: groupname
                "'PORTRAIT' TEXT," + // 3: portrait
                "'STATUS' TEXT   );"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_INFOS'";
        db.execSQL(sql);
    }
    protected void bindValues(SQLiteStatement stmt, GroupInfos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getGroupid());
        stmt.bindString(3, entity.getGroupname());
 
    }
  

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupInfos readEntity(Cursor cursor, int offset) {
        GroupInfos entity = new GroupInfos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userid
            cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // portrait
            cursor.getString(offset + 4) // status
        );
        return entity;
    }
     
  
    public void readEntity(Cursor cursor, GroupInfos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupid(cursor.getString(offset + 1));
        entity.setGroupname(cursor.getString(offset + 2));
        entity.setPortrait(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.getString(offset + 4));
     }
    
    @Override
    protected Long updateKeyAfterInsert(GroupInfos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    public Long getKey(GroupInfos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }




}
